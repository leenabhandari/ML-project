Python 2.7.14 (v2.7.14:84471935ed, Sep 16 2017, 20:19:30) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from pandas import read_csv
>>> import numpy as np
>>> from sklearn.neighbors import KNeighborsClassifier
>>> from sklearn import linear_model
>>> from sklearn.model_selection import train_test_split
>>> from sklearn import tree
>>> from sklearn.feature_extraction.text import CountVectorizer
>>> from sklearn.ensemble import RandomForestClassifier
>>> from sklearn.svm import SVC
>>> from sklearn.preprocessing import Imputer
>>> from sklearn.feature_extraction import FeatureHasher
>>> from sklearn.feature_extraction.text import HashingVectorizer
>>> from sklearn.model_selection import KFold
>>> from sklearn.model_selection import cross_val_score
>>> from sklearn.model_selection import cross_val_predict
>>> from sklearn import metrics
>>> import string
>>> data=read_csv('h1b_kaggle1.csv')
>>> ds=data.values
>>> X_data1=ds[:,6]
>>> Y_data=ds[:,1]
>>> imp=Imputer()
>>> X_trans=imp.fit_transform(X_data1.reshape(-1,1))
>>> model=tree.DecisionTreeClassifier()
>>> kfold = KFold(n_splits=10, random_state=7)
>>> predicted=cross_val_predict(model,X_trans,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.8368334733389335
>>> model=RandomForestClassifier()
>>> predicted=cross_val_predict(model,X_trans,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.8313332533301332

>>> full_time=ds[:,5]
>>>
>>> for i in range(full_time.size):
...  if full_time[i]=='Y':
...   full_time[i]=1
...  else:
...   full_time[i]=0
...
>>> model=tree.DecisionTreeClassifier()
>>> X_data2=np.c_[X_trans, full_time]
>>> predicted=cross_val_predict(model,X_data2,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.8368334733389335
>>> model=RandomForestClassifier()
>>> predicted=cross_val_predict(model,X_data2,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.8254530181207248

>>> lon=ds[:,9]>>> X_lon=imp.fit_transform(lon.reshape(-1,1))
>>> predicted=cross_val_predict(model,X_lon,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.8720948837953518
>>> predicted[0:50]
array(['CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED'],
      dtype=object)
>>> X_data3=np.c_[X_trans, lon]
>>> X_data3=np.c_[X_trans, X_lon]
>>> predicted=cross_val_predict(model,X_lon,Y_data,cv=kfold)
>>> predicted=cross_val_predict(model,X_data3,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.8321332853314133
>>> model=tree.DecisionTreeClassifier()
>>> predicted=cross_val_predict(model,X_data3,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.7948717948717948

>>> lat=ds[:,10]
>>> X_lat=imp.fit_transform(lat.reshape(-1,1))
>>> X_data4=np.c_[X_trans,X_lat]
>>> predicted=cross_val_predict(model,X_data3,Y_data,cv=kfold)
>>> predicted=cross_val_predict(model,X_data4,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.8340733629345174
>>> model=tree.DecisionTreeClassifier()
>>> predicted=cross_val_predict(model,X_data4,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.7991119644785791

>>> X_data5=np.c_[X_trans,X_lon,X_lat]
>>> predicted=cross_val_predict(model,X_data5,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.7946917876715068
>>> model=RandomForestClassifier()
>>> predicted=cross_val_predict(model,X_data5,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.8237729509180367

>>> ws=ds[:,8]
>>> ws=ws.astype(str)
>>> c=np.char.split(ws,',')
>>> d=[i[1] for i in c]
>>> hv = HashingVectorizer(n_features=10)
>>> X_ws=hv.transform(d).toarray()
>>> predicted=cross_val_predict(model,X_ws,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.875535021400856
>>> predicted[50:100]
array(['CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED',
       'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED', 'CERTIFIED'],
      dtype=object)
	  >>> X_data5=np.c_[X_trans,X_ws]
>>> predicted=cross_val_predict(model,X_data5,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.812332493299732
>>> model=tree.DecisionTreeClassifier()
>>> predicted=cross_val_predict(model,X_data5,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.8157326293051722
>>> model=RandomForestClassifier()
>>> predicted=cross_val_predict(model,X_data6,Y_data,cv=kfold)
>>> metrics.accuracy_score(Y_data, predicted)
0.8292131685267411



